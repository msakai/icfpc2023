openapi: 3.0.0
info:
  title: ICFPC2023
  description: ICFP Programming Contest 2023
  version: 1.0.0
servers:
  - url: https://api.icfpcontest.com/
    description: the server

paths:
  /submission:
    get:
      operationId: getSubmission
      tags:
        - submission
      summary: "Get submission with ID. You can only get submissions linked to your account."
      description: "Get submission with ID. You can only get submissions linked to your account."
      parameters:
        - name: submission-id
          in: query
          required: true
          schema:
            type: string
      security:
        - Bearer: []
      responses:
        "200":
          description: hoge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResponse'
    post:
      operationId: postSubmission
      tags:
        - submission
      summary: "Post submission with contents and problem id."
      description: "Post submission with contents and problem id."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionRequest'
      security:
        - Bearer: []
      responses:
        "200":
          description: hoge
          content:
            text/plain:
              schema:
                type: string
              example: hoge

  /submissions:
    get:
      operationId: getSubmissions
      tags:
        - submission
      summary: "Get [limit] number of your past submissions starting from a given [offset], sorted by submission time."
      description: "Get [limit] number of your past submissions starting from a given [offset], sorted by submission time."
      parameters:
        - name: offset
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: true
          schema:
            type: integer
        - name: problem_id
          in: query
          required: false
          schema:
            type: integer
      security:
        - Bearer: []
      responses:
        "200":
          description: hoge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionsResponse'

  /problem:
    get:
      operationId: getProblem
      tags:
        - problem
      summary: "Get problems contents with problem id."
      description: "Get problems contents with problem id."
      parameters:
        - name: problem_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: hoge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemResponse'

  /problems:
    get:
      operationId: getNumberOfProblems
      tags:
        - problem
      summary: "Get number of problems."
      description: "Get number of problems."
      parameters: []
      responses:
        "200":
          description: hoge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemsResponse'

  /scoreboard:
    get:
      operationId: getScoreboard
      tags:
        - scoreboard
      summary: "Get the global scoreboard."
      description: "Get the global scoreboard."
      parameters: []
      responses:
        "200":
          description: hoge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scoreboard'

  /userboard:
    get:
      operationId: getUserboard
      tags:
        - scoreboard
      summary: "Get scoreboard for your account."
      description: "Get scoreboard for your account. Provides the highest score for each problem."
      parameters: []
      security:
        - Bearer: []
      responses:
        "200":
          description: hoge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserboardResponse'

  /register:
    post:
      operationId: register
      tags:
        - account
      summary: "Register your account to the contest."
      description: "Register your account to the contest."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        "200":
          description: hoge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'

  /login:
    post:
      operationId: login
      tags:
        - account
      summary: "Login with your account"
      description: "Login with your account"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: hoge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'


components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API

  schemas:
    SubmissionResponse:
      type: object
      properties:
        Success:
          $ref: '#/components/schemas/Submission'
          description: submission
        Failure:
          type: string
          description: failure message
      description: submission
    Submission:
      type: object
      properties:
        submission:
          $ref: SubmissionInfo
          description: submission metadata
        contents:
          type: string
          description: submission contents
      required:
        - submission
        - contents
      description: submission
    SubmissionInfo:
      type: object
      properties:
        _id:
          type: string
          description: submission id
        problem_id:
          type: integer
          description: problem id
        user_id:
          type: string
          description: user id
        score:
          $ref: '#/components/schemas/SubmissionInfoScore'
          description: score
      required:
        - _id
        - problem_id
        - user_id
        - score
      description: submission metadata
    SubmissionInfoScore:
      description: submission result from judge
      # Any Type
      # oneOf:
      #   - $ref: '#/components/schemas/SubmissionInfoScoreProcessing'
      #   - $ref: '#/components/schemas/SubmissionInfoScoreJudged'
    # SubmissionInfoScoreProcessing:
    #   type: string
    #   enum: [Processing]
    #   description: score (processing)
    # SubmissionInfoScoreJudged:
    #   type: object
    #   properties:
    #     Success:
    #       type: number
    #       description: score
    #     Failure:
    #       type: string
    #       description: failure message
    #   description: score (judged)

    SubmissionRequest:
      type: object
      properties:
        problem_id:
          type: integer
          description: problem id
        contents:
          type: string
          description: submission contents
      required:
        - problem_id
        - contents
      description: content and problem id

    SubmissionsResponse:
      type: object
      properties:
        Success:
          type: array
          items:
            $ref: '#/components/schemas/Submission'
          description: submissions
        Failure:
          type: string
          description: failure message
      description: submissions response

    ProblemResponse:
      type: object
      properties:
        Success:
          type: string
          description: problem definition
        Failure:
          type: string
          description: failure message
      description: problem response

    ProblemsResponse:
      type: object
      properties:
        number_of_problems:
          type: number
          description: number of problems
      required:
        - number_of_problems
      description: number of problems

    Scoreboard:
      type: object
      properties:
        frozen:
          type: boolean
          description: Frozen means scoreboard is frozen at the last updated point, so you are seeing the snapshot from that moment.
        scoreboard:
          type: array
          items:
            $ref: '#/components/schemas/ScoreboardItem'
          description: sorted by scores
        updated_at:
          type: string
          description: date
      required:
        - frozen
        - scoreboard
        - updated_at
      description: global score board
    ScoreboardItem:
      type: object
      properties:
        username:
          type: string
          description: user name
        score:
          type: number
          description: score
      required:
        - username
        - score
      description: username and score

    UserboardResponse:
      type: object
      properties:
        Success:
          $ref: UserboardResponseSuccess
          description: userboard
        Failure:
          type: string
          description: failure message
      description: userboard response
    UserboardResponseSuccess:
      type: object
      properties:
        problems:
          type: array
          items:
            type: number
            nullable: true
          description: the highest score for each problem
      required:
        - problems      

    JWTResponse:
      type: object
      properties:
        Success:
          type: string
          description: your JWT access token
        Failure:
          type: string
          description: failure message
      description: your JWT access token

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          description: username
        email:
          type: string
          description: must be a valid email
        password:
          type: string
          description: password
      required:
        - username
        - email
        - password
      description: register request

    LoginRequest:
      type: object
      properties:
        username_or_email:
          type: string
          description: username or email
        password:
          type: string
          description: password
      required:
        - username_or_email
        - password
      description: login request
